<!doctype html>
<html lang="en-us">
<head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>@GE211_TITLE@</title>
    <link rel=stylestyle href=@GE211_STYLESHEET@>
</head>
<body>
<main>

<div class=spinner id=spinner></div>
<div class=emscripten id=status>Downloading...</div>

<div class=emscripten>
    <progress value=0 max=100 id=progress hidden></progress>
</div>

<div class=emscripten_border>
    <canvas class=emscripten id=canvas
            oncontextmenu="event.preventDefault()" tabindex=-1></canvas>
</div>
<textarea id=output rows=8></textarea>

<script type="text/javascript">
    const canvasElement = document.getElementById('canvas')
    const statusElement = document.getElementById('status')
    const progressElement = document.getElementById('progress')
    const spinnerElement = document.getElementById('spinner')

    var Module = {
        preRun: [],
        postRun: [],
        print: (function () {
            const element = document.getElementById('output')
            if (element)
                element.value = ''  // clear browser cache

            return text => {
                if (arguments.length > 1)
                    text = Array.prototype.slice.call(arguments).join(' ')

                // These replacements are necessary if you render to raw HTML
                //text = text.replace(/&/g, "&amp;")
                //text = text.replace(/</g, "&lt;")
                //text = text.replace(/>/g, "&gt;")
                //text = text.replace('\n', '<br>', 'g')

                console.log(text)

                if (element) {
                    element.value += text + "\n"
                    // focus on bottom:
                    element.scrollTop = element.scrollHeight
                }
            }
        })(),
        printErr(text) {
            if (arguments.length > 1)
                text = Array.prototype.slice.call(arguments).join(' ')
            console.error(text)
        },
        canvas: canvasElement,
        setStatus(text) {
            if (!Module.setStatus.last) {
                Module.setStatus.last = {
                    time: Date.now(),
                    text: ''
                }
            }

            if (text === Module.setStatus.last.text)
                return

            const match = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/)
            const now = Date.now()

            // if this is a progress update, skip it if too soon:
            if (match && now - Module.setStatus.last.time < 30)
                return

            Module.setStatus.last.time = now
            Module.setStatus.last.text = text

            if (match) {
                text = match[1]
                progressElement.value = parseInt(match[2]) * 100
                progressElement.max = parseInt(match[4]) * 100
                progressElement.hidden = false
                spinnerElement.hidden = false
            } else {
                progressElement.value = null
                progressElement.max = null
                progressElement.hidden = true
                if (!text) spinnerElement.style.display = 'none'
            }
            statusElement.innerHTML = text
        },
        totalDeps: 0,
        monitorRunDependencies(left) {
            const deps = Math.max(this.totalDeps, left)
            this.totalDeps = deps
            Module.setStatus(
                left ? `Preparing... ${deps - left}/${deps})`
                    : 'All downloads complete.')
        }
    }

    Module.setStatus('Downloading...')

    // As a default initial behavior, pop up an alert when webgl
    // context is lost. To make your application robust, you may want
    // to override this behavior before shipping! See
    // http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15.2
    canvasElement.addEventListener('webglcontextlost', (e) => {
        alert('WebGL context lost. You will need to reload the page.')
        e.preventDefault()
    }, false)

    window.onerror = event => {
        // Future To Do: Don't warn on ok events like simulating an infinite
        // loop or exitStatus
        Module.setStatus('Exception thrown, see JavaScript console')
        spinnerElement.style.display = 'none'
        Module.setStatus = text => {
            if (text)
                Module.printErr('[post-exception status] ' + text)
        }
    }
</script>

<script async type="text/javascript" src="@GE211_JAVASCRIPT@"></script>

</main>
</body>
</html>
